
## Double hash is a velocity comment -- bad for markdown
#set($H1 = '#')
#set($H2 = '##')
#set($H3 = '###')

$H1 ${project.name}

This plug-in reads properties files and generates Java classes holding constants for
the property keys.

The goal `generate` scans a given directory (default `src/main/resources`) for properties
files and creates constants classes for all of them.

If requested, the classes contain methods to load the properties file as `ResourceBundle` or `Properties`.

$H2 Example

The file `messages.properties` contains two entries:

```config
welcome=Welcome to Maven
goodby=See you next time
```

From this file, the following Java class will be generated.

```java
/**
 * Constants for messages.properties.
 *
 * @author properties-constants-maven-plugin
 */
public final class Messages {

    /**
     * welcome=Welcome to Maven
     */
    public final static String WELCOME = "welcome";

    /**
     * goodby=See you next time
     */
    public final static String GOODBY = "goodby";

    /** Hidden constructor. */
    private Messages() {
        // nothing to instantiate
    }
}
```

$H3 Additional Methods

Per configuration additional static methods are added to the generated class.

Option `genGetPropertiesFilename` adds a method to get the properties file name
relative to the configured base directory:

```java
/**
 * Returns the filename of the properties file used to generate
 * this class.
 *
 * @returns always "messages.properties"
 */
public static String getPropertiesFilename() {
    return "messages.properties";
}
```

Option `genPropertiesLoader` adds a method to load the `Properties`:

```java
/**
 * Loads the properties file "/messages.properties" from the classpath.
 * @returns the loaded properties
 * @throws IOException on load problems
 */
public static Properties loadProperties() throws IOException {
    final Properties properties = new Properties();
    try (final InputStream stream = Messages.class.getResourceAsStream("/messages.properties")) {
        properties.load(stream);
    }
    return properties;
}
```

Option `genGetBundleName` adds a method to get the bundle name. This is
the properties file name excluding extension and possible locale marker.

```java
/**
 * Returns the bundle name - this is the properties file name
 * used to generate this class excluding extension and locale marker.
 *
 * @returns always "messages"
 */
public static String getBundleName() {
    return "messages";
}
```

Option `genBundleLoader` adds methods to load the properties file as
`ResourceBundle`.

```java
/**
 * Loads the resource bundle "messages" for the default locale.
 * @returns the loaded bundle
 */
public static ResourceBundle loadBundle() {
    return ResourceBundle.getBundle("messages");
}

/**
 * Loads the resource bundle "messages" for the given locale.
 * @param locale the locale to use
 * @returns the loaded bundle
 */
public static ResourceBundle loadBundle(final Locale locale) {
    return ResourceBundle.getBundle("messages", locale);
}
```

$H2 Properties Source Files

The plugin supports traditional `*.properties` files and XML
properties. If the file extension is `.xml` (case insensitive) it
is read as XML file, all other extensions are handled like a `*.properties`.


$H2 Property Key to Java Constant Name

The plugin creates names for the Java constants from the names of
the keys in the properties file.

1. Insert an underscore when a lower case character is followed by
   an upper case character. E.g. `testCase` -> `test_Case`
2. Make the entire string upper case
3. Check that the first character is valid as the leading character
   of a Java name. If not, insert a leading underscore.
   E.g. `0TEST` -> `_0TEST`
4. Check all characters whether they are allowed Java identifier characters.
   If not, replace it with an underscore.
   E.g. `TEST.CASE` -> `TEST_CASE`

__Examples__

| Property Key  | Java Constant |
|---------------|---------------|
| testCase      | TEST_CASE     |
| test.case     | TEST_CASE     |
| test..case    | TEST__CASE    |
| test_case     | TEST_CASE     |
| test$case     | TEST$CASE     |
| 0test         | _0TEST        |





---
The plugin requires **Maven ${project.prerequisites.maven}** or later and **Java 8** or later.
