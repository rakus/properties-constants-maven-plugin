
## Double hash is a velocity comment -- bad for markdown
#set($H1 = '#')
#set($H2 = '##')
#set($H3 = '###')

$H1 ${project.name}

This plug-in reads properties files and generates Java classes holding
constants for the property keys or values. It scans a given directory (default
`src/main/resources`) for properties files and creates constants classes for
all of them.

By default a generated class containing constants for the keys to access the
properties. By configuration the class could be generated to contain constants
holding the values from the properties file. In this case the properties file
itself is not needed during runtime.

If requested, the classes contain methods to load the properties file as
`ResourceBundle` or `Properties`.

In Eclipse the plugin goal `generate` is used as a build participant and runs on
incremental and clean builds.

$H2 Example

The file `messages.properties` contains two entries:

```config
welcome=Welcome to Maven
goodby=See you next time
```

With the default template `keys` the following Java class will be generated.

```java
/**
 * Constants for messages.properties
 * <p>
 * The constant values are the keys to access the properties.
 *
 * @author properties-constants-maven-plugin
 */
public final class Messages {

    /**
     * Key of welcome=Welcome to Maven
     */
    public final static String WELCOME = "welcome";

    /**
     * Key of goodby=See you next time
     */
    public final static String GOODBY = "goodby";

    /** Hidden constructor. */
    private Messages() {
        // nothing to instantiate
    }
}
```

With the template `values` the following Java class will be generated.
```java
/**
 * Constants for messages.properties
 * <p>
 * The constant values are the values of the properties.
 *
 * @author properties-constants-maven-plugin
 */
public final class Messages {

    /**
     * Value of welcome=Welcome to Maven
     */
    public final static String WELCOME = "Welcome to Maven";

    /**
     * Value of goodby=See you next time
     */
    public final static String GOODBY = "See you next time";

    /** Hidden constructor. */
    private Messages() {
        // nothing to instantiate
    }
}
```

$H3 Additional Methods

The default template `keys` supports template options to generate additional
static methods in the generated class.

Note that the template `values` does not support any template options.

Option `genGetPropertiesFilename` adds a method to get the properties file name
relative to the configured base directory:

```java
/**
 * Returns the filename of the properties file used to generate
 * this class.
 *
 * @return always "messages.properties"
 */
public static String getPropertiesFilename() {
    return "messages.properties";
}
```

Option `genLoadProperties` adds a method to load the `Properties`:

```java
/**
 * Loads the properties file "messages.properties" from the classpath.
 * @return the loaded properties
 * @throws IOException if properties file not found or on load problems
 */
public static Properties loadProperties() throws IOException {
    final Properties properties = new Properties();
    try (final InputStream stream = Messages.class.getResourceAsStream("/messages.properties")) {
        if(stream == null) {
            throw new IOException("Resource not found: messages.properties");
        }
        properties.load(stream);
    }
    return properties;
}
```

Option `genGetBundleName` adds a method to get the bundle name. This is
the properties file name excluding extension and possible locale marker.

```java
/**
 * Returns the bundle name - this is the properties file name
 * used to generate this class excluding extension and locale part.
 *
 * @return always "messages"
 */
public static String getBundleName() {
    return "messages";
}
```

Option `genLoadBundle` adds methods to load the properties file as
`ResourceBundle`.

```java
/**
 * Loads the resource bundle "messages" for the default locale.
 * @return the loaded bundle
 * @throws MissingResourceException if bundle couldn't be found
 */
public static ResourceBundle loadBundle() {
    return ResourceBundle.getBundle("messages");
}

/**
 * Loads the resource bundle "messages" for the given locale.
 * @param locale the locale to use
 * @return the loaded bundle
 * @throws MissingResourceException if bundle couldn't be found
 * @throws NullPointerException if locale is null
 */
public static ResourceBundle loadBundle(final Locale locale) {
    return ResourceBundle.getBundle("messages", locale);
}
```

$H2 Properties Source Files

The plugin supports traditional `*.properties` files and XML
properties. If the file extension is `.xml` (case insensitive) it
is read as XML file, all other extensions are handled like a `*.properties`.


$H2 Property Key to Java Constant Name

The plugin creates names for the Java constants from the names of
the keys in the properties file.

1. Trim leading and trailing whitespaces.
2. Insert an underscore when a lower case character is followed by
   an upper case character. E.g. `testCase` -> `test_Case`.
3. Make the entire string upper case
4. Check that the first character is valid as the leading character
   of a Java name. If not, insert a leading underscore.
   E.g. `0TEST` -> `_0TEST`.
   If the now second character is not a valid Java identifier character
   drop it.
   E.g. `%TEST` -> `_TEST`.
5. Replace all characters that are not valid Java identifier characters
   with an underscore.
   E.g. `TEST.CASE` -> `TEST_CASE`.

__Examples__

| Property Key  | Java Constant |
|---------------|---------------|
| `testCase`    | `TEST_CASE`   |
| `test.case`   | `TEST_CASE`   |
| `test..case`  | `TEST__CASE`  |
| `test_case`   | `TEST_CASE`   |
| `test$case`   | `TEST$CASE`   |
| `0test`       | `_0TEST`      |
| `%test`       | `_TEST`       |

__Recommendations__

Also this plugin should be able to handle any properties keys,
it works best if the keys ...

* only contain ASCII characters, digits and the separators dot, underscore and dash (aka minus-sign).
* start with a ASCII character.
* end with a ASCII character or a digit.
* never contain two or more consecutive separators.

It is also recommended to only use lower case ASCII characters.

---
The plugin requires **Maven ${project.prerequisites.maven}** or later and
**Java 8** or later.

