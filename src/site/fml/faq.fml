<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2021 Ralf Schandl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
    id="FAQ" title="Frequently Asked Questions">

    <part id="plugin">
        <title>The Properties Constants Maven Plugin</title>

        <faq id="is.this.a.good.idea">
            <question>Is creating constants for properties key a good idea at all?</question>
            <answer>
                <p>Yes, this helps the developers to check at compile time whether the
                properties key is valid or not (assuming the constants are used with the right
                    properties file).</p>
                <p>A common concern is about big properties files, e.g. for I18N they might contain
                hundreds or more entries. The classes for this kind of properties files will be big
                (or even huge). But that doesn't matter, as the Java compiler embeds the constant
                values into the classes using them. The constant class itself is not loaded at
                    runtime.</p>
                <p>So, if the constants class is huge, it is a compile-time problem, not a runtime one.</p>
            </answer>
        </faq>
        <faq id="size.limit">
            <question>How big can a properties file be to work with the plugin?</question>
            <answer>
                <p>If using the default templates "keys", the maximum number of entries
                in a properties file is 21838. This would result in a Java class with
                21839 String constants, as an additional constant for the properties file
                    name is created.</p>
                <p>This is the maximum number of String constants a class can have, assuming all
                constant values are different and the class has only the default constructor and
                    no other method.</p>
                <p>To understand this odd number, you might want to read up on the "constant pool"
                    of the Java class file.</p>
            </answer>
        </faq>
        <faq id="central.custom.template">
            <question>How can I use a centralized custom template for all of my projects?</question>
            <answer>
                <p>Do it with a Maven dependency.</p>
                <p>Create a jar that only contains your Freemarker template and deploy it to your
                    local Maven repository.</p>
                <p>Then configure the plugin similar to this:</p>
                <source><![CDATA[
<plugin>
  <groupId>de.r3s6.maven</groupId>
  <artifactId>properties-constants-maven-plugin</artifactId>
  <version>${properties-constants-maven-plugin.version}</version>
  <configuration>
    <basePackage>com.example.constants</basePackage>
    <template>my-custom-template.ftl</template>
  </configuration>
  <dependencies>
    <dependency>
      <groupId>com.example.constants</groupId>
      <artifactId>prop-const-template</artifactId>
      <version>1.0.0</version>
    </dependency>
  </dependencies>
</plugin>]]></source>
            </answer>

        </faq>
        <faq id="xml.properties">
            <question>
                Does the <code>properties-constants-maven-plugin</code> support XML properties?
            </question>
            <answer>
                <p>Yes, if the file name extension contains <code>xml</code> (case insensitive), the file
                    is read as XML properties.</p>
                <p> Note that the content must comply to the simple
                <a href="http://java.sun.com/dtd/properties.dtd">Properties DTD</a>.
                </p>
            </answer>
        </faq>
        <faq id="file.extensions">
            <question>Which file extensions are required?</question>
            <answer>
                <p>The plugin only cares whether the file extension contains <code>xml</code> or not.
                Files witch extension contain <code>xml</code> (case insensitive) are read as XML.
                All other extensions are handled like <code>*.properties</code>.</p>
            </answer>
        </faq>

    </part>
    <part id="properties.general">
        <title>Java Properties and ResourceBundles</title>

        <faq id="properties.charset">
            <question>Why are some fancy chars from my properties not loaded correctly?</question>
            <answer>
                <p>The defined character encoding for properties files is ISO-8859-1 (sometime
                called "latin1"). Every character outside of this character set has to be encode
                using the <code>\uXXXX</code> representation.
                </p>
                <p>E.g.the simple smiley &#x263A; can be added with <code>\u263A</code>.</p>
                <p>Depending on your use case, a XML properties file might be better. See above.</p>
                <p>Beginning with Java9 the character set for <code>ResourceBundle</code>s can be
                UTF-8. See the javadoc of <code>java.util.PropertyResourceBundle</code>.</p>
            </answer>
        </faq>
    </part>

</faqs>
