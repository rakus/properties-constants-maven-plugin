<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2021 Ralf Schandl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
    id="FAQ" title="Frequently Asked Questions">

    <part id="plugin">
        <title>The Properties Constants Maven Plugin</title>

        <faq id="is.this.a.good.idea">
            <question>Is creating constants for properties key a good idea at all?</question>
            <answer>
                <p>Well, it depends.</p>
                <p>This helps the developers to check at compile time whether the
                properties key is valid or not (assuming he/she uses the constant with the right
                    properties file).</p>
                <p>While this is useful, it might depend on the size of the properties file. If it
                contains hundreds or even thousands of entries, I'm not sure whether it is a good
                    idea to create a Java class containing that number of String constants.</p>
                <p>So: Make you own judgment whether this plugin is a good idea for your use case
                or your specific context.</p>
            </answer>
        </faq>
        <faq id="size.limit">
            <question>Is there a limit for the number of constants in a class?</question>
            <answer>
                <p>I don't know, but I wouldn't be surprised.</p>
                <p>For testing a properties file with 20000 entries was created and a class with
                constants was generated for it. Each property key was 44 chars long. The generated
                    Java source code had 100080 lines and the compiled class file was 2 MB.</p>
                <p>This worked with Java 8, 11 and 17.</p>
                <p>Anyway, creating a constants class of this size is most likely not a good idea.</p>
            </answer>
        </faq>
        <faq id="central.custom.template">
            <question>How can I use a centralized custom template for all of my projects?</question>
            <answer>
                <p>Do it with a Maven dependency.</p>
                <p>Create a jar that only contains your Freemarker template and deploy it to your
                    local Maven repository.</p>
                <p>Then configure the plugin like this:</p>
                <source><![CDATA[
<plugin>
  <groupId>de.r3s6.maven</groupId>
  <artifactId>properties-constants-maven-plugin</artifactId>
  <version>${properties-constants-maven-plugin.version}</version>
  <configuration>
    <basePackage>com.example.constants</basePackage>
    <template>my-custom-template.ftl</template>
  </configuration>
  <dependencies>
    <dependency>
      <groupId>com.example.constants</groupId>
      <artifactId>prop-const-template</artifactId>
      <version>1.0.0</version>
    </dependency>
  </dependencies>
</plugin>]]></source>
            </answer>

        </faq>
        <faq id="xml.properties">
            <question>
                Does the <code>properties-constants-maven-plugin</code> support XML properties?
            </question>
            <answer>
                <p>Yes, if the configuration also includes <code>*.xml</code> files, those files
                are read using <code>Properties.loadFromXml()</code>.</p>
                <p>If a constant class is created from an XML file, the loader method
                <code>loadProperties()</code> also uses <code>loadFromXml()</code>.</p>
                <p>To include XML files use the configuration option <code>&lt;includes&gt;</code>
                like:
                </p>
                <source><![CDATA[
<includes>
  <include>*.xml</include>
</includes>]]></source>

                <p> Note that the content must comply to the simple
                <a href="http://java.sun.com/dtd/properties.dtd">Properties DTD</a>.
                </p>
                <p>Loading XML-Files as <code>ResourceBundle</code> is not supported out of the box.
                See <a href="#xml.resourcebundle">this question</a></p>
            </answer>
        </faq>
        <faq id="file.extensions">
            <question>Which file extensions are required?</question>
            <answer>
                <p>The plugin only cares whether the file has the extension <code>xml</code> or not.
                Files with the extension <code>xml</code> (case insensitive) are read as XML.
                All other extensions are handled like <code>*.properties</code>.</p>
            </answer>
        </faq>
        <faq id="load.failed">
            <question>Load of Properties or ResourceBundle failed at runtime. Why?</question>
            <answer>
            <p>The generated static methods <code>loadProperties()</code> and <code>loadBundle(...)</code> use the
            class loader to load the properties file. Prerequisites are:</p>
            <ol>
            <li>the properties file are added to the created jar and are available on the classpath</li>
            <li>the configuration options <code>&lt;resourceDir&gt;</code> and <code>&lt;includes&gt;</code> are
                used correctly</li>
            </ol>
            <p>The second point needs some explanation. The path to the properties file in the
            generated Java code is relative to the configuration option <code>&lt;resourceDir&gt;</code>.
            If the properties files to translate are located in <code>src/main/resources/messages</code>,
            the plugin needs following configuration:</p>
        <source><![CDATA[
<configuration>
  <resourceDir>src/main/resources</resourceDir>   <!-- the default -->
  <includes>
    <include>messages/*.properties</include>
  </includes>
</configuration>]]></source>
            <p>Then the path to the properties in the generated Java file is <code>messages/xyz.properties</code>
            and loading works.</p>
            </answer>
        </faq>

    </part>
    <part id="properties.general">
        <title>Java Properties and ResourceBundles</title>

        <faq id="properties.charset">
            <question>Why are some fancy chars from my properties not loaded correctly?</question>
            <answer>
                <p>The defined character encoding for properties files is ISO-8859-1 (sometime
                called "latin1"). Every character outside of this character set has to be encode
                using the <code>\uXXXX</code> representation.
                </p>
                <p>E.g.the simple smiley &#x263A; can be added with <code>\u263A</code>.</p>
                <p>Depending on your use case, a XML properties file might be better. See above.</p>
                <p>Beginning with Java9 the character set for <code>ResourceBundle</code>s can be
                UTF-8. See the javadoc of <code>java.util.PropertyResourceBundle</code>.</p>
            </answer>
        </faq>
    </part>

</faqs>
