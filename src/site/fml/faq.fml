<?xml version="1.0" encoding="UTF-8"?>

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
    id="FAQ" title="Frequently Asked Questions">

    <part id="plugin">
        <title>The Properties Constants Maven Plugin</title>

        <faq id="xml.properties">
            <question>
                Does the <tt>properties-constants-maven-plugin</tt> support XML properties?
            </question>
            <answer>
                <p>Yes, if the configuration also includes <tt>*.xml</tt> files, those files
                are read using <tt>Properties.loadFromXml()</tt>.</p>
                <p>If a constant class is created from an XML file, the loader method
                <tt>loadProperties()</tt> also uses <tt>loadFromXml()</tt>.</p>
                <p>To include XML files use the configuration option <tt>&lt;includes&gt;</tt>
                like:
                </p>
                <source>
&lt;includes&gt;
    &lt;include&gt;*.xml&lt;include&gt;
&lt;/includes&gt;</source>

                <p> Note that the content must comply to the simple
                <a href="http://java.sun.com/dtd/properties.dtd">Properties DTD</a>.
                </p>
                <p>Loading XML-Files as <tt>ResourceBundle</tt> is not supported out of the box.
                See <a href="#xml.resourcebundle">this question</a></p>
            </answer>
        </faq>
        <faq id="file extensions">
            <question>Which file extensions are required?</question>
            <answer>
            <p>The file extension is not relevant for the plugin. Files with the extension
            <tt>xml</tt> (case insensitive) are read as XML. All other extensions are handled
            like <tt>*.properties</tt>.</p>
            </answer>
        </faq>
        <faq id="load.failed">
            <question>Load of Properties or ResourceBundle failed at runtime. Why?</question>
            <answer>
            <p>The generated static methods <tt>loadProperties()</tt> and <tt>loadBundle(...)</tt> use the
            class loader to load the properties file. Prerequisites are:</p>
            <ol>
            <li>the properties file are added to the created jar and are available on the classpath</li>
            <li>the configuration options <tt>&lt;resourceDir&gt;</tt> and <tt>&lt;includes&gt;</tt> are
                used correctly</li>
            </ol>
            <p>The second point needs some explanation. The path to the properties file in the
            generated Java code is relative to the configuration option <tt>&lt;resourceDir&gt;</tt>.
            If the properties files to translate are located in <tt>src/main/resources/messages</tt>,
            the plugin needs following configuration:</p>
                <source>
&lt;resourceDir&gt;src/main/resources&gt;   &lt;!-- the default --&gt;
&lt;includes&gt;
    &lt;include&gt;messages/*.properties&lt;include&gt;
&lt;/includes&gt;</source>
            <p>Then the path to the properties in the generated Java file is <tt>messages/xyz.properties</tt>
            and loading works.</p>
            </answer>
        </faq>

    </part>
    <part id="properties.general">
        <title>Java Properties and ResourceBundles</title>

        <faq id="properties.charset">
            <question>Why are some fancy chars from my properties not loaded correctly?</question>
            <answer>
                <p>The defined character encoding for properties files is ISO-8859-1 (sometime
                called "latin1"). Every character outside of this character set has to be encode
                using the <tt>\uXXXX</tt> representation.
                </p>
                <p>E.g.the simple smiley &#x263A; can be added with <tt>\u263A</tt>.</p>
                <p>Depending on your use case, a XML properties file might be better. See above.</p>
                <p>Beginning with Java9 the character set for <tt>ResourceBundle</tt>s can be
                UTF-8. See the javadoc of <tt>java.util.PropertyResourceBundle</tt>.</p>
            </answer>
        </faq>
        <faq id="xml.resourcebundle">
            <question>How can I load a ResourceBundle from a XML file?</question>
            <answer>
                <p>This is not supported by default but can be implemented by extending
                <tt>ResourceBundle.Control</tt> and implementing <tt>ResourceBundleControlProvider</tt>
                and a <tt>ServiceLoader</tt> config.</p>
                <p>For Java8 this is explained in this
                <a href="https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html">Java Tutorial</a>.</p>
            </answer>
        </faq>
    </part>


</faqs>
